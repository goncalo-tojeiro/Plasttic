// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

@use './base' as *;

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}

@function asset($base, $type, $path) {
  @return url($base + $type + $path);
}

/// REVIEW:
/// less parameters? other variables?
/// external URL?
/// see $vars_url map in variables

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base - base URL - $vars_url
/// @return {Url}
/// @require $base-url

// @function image($path, $base: $vars_url-assets) {
//   @return asset($base, 'img/', $path);
// }

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base - base URL - $vars_url
/// @return {Url}
/// @require $base-url

// @function font($path, $base: $vars_url-assets) {
//   @return asset($base, 'fonts/', $path);
// }

// Source: https://github.com/sass-mq/_mq.scss
// Change: px2rem
@function px2em($px) {
  @if math.is-unitless($px) {
    @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
    @return px2em($px * 1px);
  }
  // if $px is compatible with em units then return value unchanged
  @if math.compatible($px, 1em) {
    @return $px;
  }
  @return math.div($px, 16px) * 1em;
}
